/*
 Created by Shruti Agrawal on 4/1/17.
 Copyright Â© 2017 Shruti. All rights reserved.
 
 Problem 2
 Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 
 RunTime: O(1) constant time
 */

using namespace std;
#include <iostream>
#include <cassert>

/*
 Description: Method to find the even sum
 Input: None
 Output: int
 */
int sum_EvenFibonacci()
{
    int previousPrevious = 1;
    int previous = 2;
    int evenSum = 2;
    int max_limit = 4000000;
    while(1)
    {
        int fiboNumber = previousPrevious + previous;
        if (previousPrevious >= max_limit)
        {
            break;
        }
        previousPrevious = previous;
        previous = fiboNumber;
        
        if (fiboNumber % 2 == 0)
        {
            evenSum += fiboNumber;
        }
    }
    cout << "The sum of even Fibonacci numbers is: " << evenSum <<"\n";
    return evenSum;
}

//test Method for sum_EvenFibonacci method
void testsum_EvenFibonacci()
{
    cout<<endl<<"Entering Test: "<<endl;
    assert(sum_EvenFibonacci() == 4613732);
    assert(sum_EvenFibonacci() > 0);
    assert(sum_EvenFibonacci() %2 == 0);
}

//Entering Main
int main(int argc, const char * argv[]) {
    
    sum_EvenFibonacci();
    testsum_EvenFibonacci();
    return 0;
}
